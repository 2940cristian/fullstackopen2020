{"version":3,"sources":["components/SearchPerson.js","services/personsServices.js","components/AddPerson.js","components/DeletePersonButton.js","components/ListPersons.js","components/SuccessMessage.js","App.js","serviceWorker.js","index.js"],"names":["SearchPerson","props","states","statesNeeded","handleChangeFilter","e","setCheckPerson","target","value","temp","persons","filter","person","name","toLowerCase","includes","checkPerson","setFilteredPersons","onKeyDown","keyCode","onChange","type","baseUrl","window","location","hostname","newPerson","axios","post","then","res","console","log","catch","err","get","id","delete","editedPart","put","AddPerson","handleInputChange","setter","getAllAfterAction","message","a","personService","tempPersons","setPersons","data","setNewNumber","setNewName","setSuccessMessage","setIsShown","shown","setTimeout","preventDefault","newPersonObject","newName","number","newNumber","some","editNumber","confirm","findId","find","editing","onSubmit","required","DeletePersonButton","stateNeeded","personServices","deleting","onClick","onDelete","style","marginLeft","height","ListPersons","length","map","key","display","alignItems","filteredPersons","filteredPerson","SuccessMessagePrompt","color","backgroundColor","width","margin","border","App","useState","successMessage","isShown","useEffect","SuccessMessage","Boolean","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"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","file":"static/js/main.8385f2fd.chunk.js","sourcesContent":["import React from \"react\"\r\n\r\nconst SearchPerson = (props) => {\r\n    const states = props.statesNeeded\r\n\r\n\r\n    const handleChangeFilter = (e) => {\r\n        states.setCheckPerson(e.target.value);\r\n        const temp = states.persons.filter((person) => person.name.toLowerCase().includes(states.checkPerson.toLowerCase()));\r\n        states.setFilteredPersons(temp);\r\n      }\r\n\r\n    return (\r\n        <input onKeyDown={(e) => e.keyCode === 8 ? handleChangeFilter : null} onChange={handleChangeFilter} type=\"text\"/>\r\n    )\r\n}\r\n\r\nexport default SearchPerson","import axios from \"axios\"\r\n\r\nconst baseUrl = (window.location.hostname === \"localhost\" || window.location.hostname === \"127.0.0.1\") ?\r\n \"http://localhost:3001/api/persons\"\r\n : \r\n \"https://polar-ridge-80491.herokuapp.com/api/persons\"\r\n\r\n\r\nconst createPerson = (newPerson) => {\r\n    return axios.post(baseUrl, newPerson)\r\n    .then(res => {\r\n      console.log(res, \"person service\");\r\n      return res\r\n    }).catch(err => {\r\n      console.log(\"HIT IT\", err)\r\n      return {err}})\r\n}\r\n\r\nconst getAllPersons = () => {\r\n  return axios.get(baseUrl)\r\n}\r\n\r\nconst deletePerson = (id) => {\r\n  return axios.delete(`${baseUrl}/${id}`)\r\n}\r\n\r\nconst editPersonNumber = (id, editedPart) => {\r\n  return axios.put(`${baseUrl}/${id}`, editedPart)\r\n}\r\n\r\n\r\n  export default {createPerson, getAllPersons, deletePerson, editPersonNumber}","import React from \"react\"\r\nimport personService from \"../services/personsServices\"\r\n\r\nconst AddPerson = (props) => {\r\n    const states = props.statesNeeded;\r\n\r\n    const handleInputChange = (setter, e) => {\r\n        setter(e.target.value)\r\n    }\r\n\r\n    const getAllAfterAction = async (message) => {\r\n        const tempPersons = await personService.getAllPersons();\r\n        const handleStateChange = await states.setPersons(tempPersons.data);\r\n        states.setNewNumber(\"\");\r\n        states.setNewName(\"\");\r\n        states.setSuccessMessage(message);\r\n        states.setIsShown(!states.shown);\r\n        setTimeout(() => {\r\n            states.setIsShown(states.shown)   \r\n        }, 3000)\r\n    }\r\n\r\n    async function addPerson (e) {\r\n        e.preventDefault();\r\n        const newPersonObject = {\r\n            name: states.newName,\r\n            number: states.newNumber\r\n        }\r\n        const isFound = states.persons.some(person => person.name.toLowerCase() === newPersonObject.name.toLowerCase())\r\n        if (isFound) return editNumber(newPersonObject)\r\n        else  {\r\n        let creating = await personService.createPerson(newPersonObject)\r\n        if(creating.err) {\r\n        states.setSuccessMessage(\"Must have 8 characters for name and 3 for Number\");\r\n        states.setIsShown(!states.shown);\r\n        setTimeout(() => {\r\n            states.setIsShown(states.shown)   \r\n        }, 3000)\r\n        }\r\n        else getAllAfterAction(`${states.newName} has been aadded to phonebook`)\r\n        }\r\n    }\r\n\r\n    const editNumber = async (person) => {\r\n        if (window.confirm(`${person.name} already exists, would you like to change the number?`)) {\r\n            const findId = states.persons.find(person => person.name.toLowerCase() === states.newName)\r\n            const editing = await personService.editPersonNumber(findId.id, person)\r\n            .then(res => {return true})\r\n            .catch(err => {return false})\r\n            console.log(editing)\r\n            if(editing) {\r\n                getAllAfterAction(`${person.name}'s number has been changed`)\r\n            }\r\n            else {\r\n                states.setSuccessMessage(`error, ${person.name} has already been deleted`);\r\n                states.setIsShown(!states.shown);\r\n                setTimeout(() => {\r\n                    states.setIsShown(states.shown)   \r\n                }, 3000)\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n    <form onSubmit={addPerson}>\r\n        <div>\r\n            <h2>Add A New</h2>\r\n            name: <input required type=\"text\" onChange={(e) => {handleInputChange(states.setNewName, e)}} value={states.newName} />\r\n            number: <input required type=\"number\" onChange={(e) => {handleInputChange(states.setNewNumber, e)} } value={states.newNumber}  />\r\n        </div>\r\n        <div>\r\n            <button type=\"submit\">add</button>\r\n        </div>\r\n    </form>\r\n    )\r\n}\r\n\r\n\r\nexport default AddPerson","import React from \"react\";\r\nimport personServices from \"../services/personsServices\"\r\n\r\nconst DeletePersonButton = (props) => {\r\n    const id = props.id\r\n    const setPersons = props.stateNeeded\r\n\r\n    async function onDelete (id) {\r\n        if(window.confirm(\"Do you want to delete this person?\")) {\r\n        const deleting = await personServices.deletePerson(id)\r\n        let tempPersons = await personServices.getAllPersons()\r\n        return deleting & setPersons(tempPersons.data)\r\n        }\r\n        else return null;\r\n    }\r\n    \r\n    return (\r\n        <button onClick={() => {\r\n            onDelete(id)\r\n        }} style={{marginLeft:\"1rem\", height:\"fit-content\"}}>Delete</button>\r\n    )\r\n}\r\n\r\nexport default DeletePersonButton;","import React from \"react\";\r\nimport DeletePersonButton from \"./DeletePersonButton\";\r\n\r\nconst ListPersons = (props) => {\r\n    const states = props.statesNeeded\r\n    return (\r\n        <div>\r\n            <h2>Numbers</h2>\r\n            {states.checkPerson.length < 1 ? \r\n            states.persons.map(person => {\r\n            return (\r\n            <div key={person.name} style={{display: \"flex\", alignItems: \"center\"}}>\r\n            <p>{person.name} {person.number}</p>\r\n            <DeletePersonButton stateNeeded={states.setPersons} id={person.id}/>\r\n            </div>\r\n            )\r\n            }) : \r\n            states.filteredPersons.map(filteredPerson => {\r\n            return (\r\n            <p key={filteredPerson.name}>{filteredPerson.name} {filteredPerson.number}</p>\r\n            )\r\n            })\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ListPersons","import React from \"react\";\r\n\r\nconst SuccessMessagePrompt = (props) => {\r\n    const errStyles = {\r\n        color: \"green\",\r\n        backgroundColor: \"#D3D3D3\",\r\n        width: \"80vw\",\r\n        margin: \"1rem auto\",\r\n        border: \"1px solid green\",\r\n        \r\n    }\r\n    \r\n    return (\r\n    <div style={errStyles}>\r\n        <p style={{margin: \".4rem\"}}>{props.message}</p>\r\n    </div>\r\n    )\r\n}\r\n\r\nexport default SuccessMessagePrompt;","import React, { useState, useEffect } from 'react'\nimport SearchPerson from \"./components/SearchPerson\"\nimport AddPerson from \"./components/AddPerson\"\nimport ListPersons from \"./components/ListPersons\"\nimport personService from \"./services/personsServices\"\nimport SuccessMessagePrompt from \"./components/SuccessMessage\"\n\nconst App = () => {\n  //Variables\n  const [ persons, setPersons ] = useState([]) \n  const [filteredPersons, setFilteredPersons] = useState([]);\n  const [checkPerson, setCheckPerson] = useState(\"\")\n  const [ newName, setNewName ] = useState('');\n  const [newNumber, setNewNumber] = useState(\"\");\n  const [successMessage, setSuccessMessage] = useState(\"Yay\");\n  const [isShown, setIsShown] = useState(false)\n//Data Fetching\nuseEffect(() => {\n  personService.getAllPersons()\n  .then(res => {\n    setPersons(res.data)\n  })\n}, [])\n\nconsole.log(\"lol\")\n\n  //View\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      {isShown ? <SuccessMessagePrompt message={successMessage}/> : null}\n      <SearchPerson statesNeeded={{setCheckPerson, persons, checkPerson, setFilteredPersons}}/>\n      <AddPerson statesNeeded={{persons, setPersons, setNewName, newName, setNewNumber, newNumber, setSuccessMessage, isShown, setIsShown}}/>\n      <ListPersons statesNeeded={{checkPerson, persons, filteredPersons, setPersons}} />\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}